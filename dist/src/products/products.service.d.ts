import { CreateProductDto } from './dto/create-product.dto';
import { UpdateProductDto } from './dto/update-product.dto';
import { PrismaService } from 'nestjs-prisma';
import { OrdersService } from 'src/orders/orders.service';
import { BuyProductDto } from './dto/buy-product.dto';
export declare class ProductsService {
    private readonly prisma;
    private readonly ordersService;
    constructor(prisma: PrismaService, ordersService: OrdersService);
    create(createProductDto: CreateProductDto): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date | null;
        meta: import("@prisma/client/runtime/library").JsonValue | null;
        sku: string | null;
        price: number;
        slug: string | null;
        description: string | null;
        stock: number;
        categories: string[];
        images: string[];
        sizes: string[];
        colors: string[];
        featured: boolean;
        gender: import("@prisma/client").$Enums.Gender;
    }>;
    findAll(): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date | null;
        meta: import("@prisma/client/runtime/library").JsonValue | null;
        sku: string | null;
        price: number;
        slug: string | null;
        description: string | null;
        stock: number;
        categories: string[];
        images: string[];
        sizes: string[];
        colors: string[];
        featured: boolean;
        gender: import("@prisma/client").$Enums.Gender;
    }[]>;
    findOne(id: string): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date | null;
        meta: import("@prisma/client/runtime/library").JsonValue | null;
        sku: string | null;
        price: number;
        slug: string | null;
        description: string | null;
        stock: number;
        categories: string[];
        images: string[];
        sizes: string[];
        colors: string[];
        featured: boolean;
        gender: import("@prisma/client").$Enums.Gender;
    } | null>;
    update(id: string, updateProductDto: UpdateProductDto): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date | null;
        meta: import("@prisma/client/runtime/library").JsonValue | null;
        sku: string | null;
        price: number;
        slug: string | null;
        description: string | null;
        stock: number;
        categories: string[];
        images: string[];
        sizes: string[];
        colors: string[];
        featured: boolean;
        gender: import("@prisma/client").$Enums.Gender;
    }>;
    remove(id: string): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date | null;
        meta: import("@prisma/client/runtime/library").JsonValue | null;
        sku: string | null;
        price: number;
        slug: string | null;
        description: string | null;
        stock: number;
        categories: string[];
        images: string[];
        sizes: string[];
        colors: string[];
        featured: boolean;
        gender: import("@prisma/client").$Enums.Gender;
    }>;
    buy(userId: string, buyProductDto: BuyProductDto): Promise<{
        init_point: string | undefined;
        message: string;
        order: {
            items: ({
                product: {
                    id: string;
                    name: string;
                    createdAt: Date;
                    updatedAt: Date | null;
                    meta: import("@prisma/client/runtime/library").JsonValue | null;
                    sku: string | null;
                    price: number;
                    slug: string | null;
                    description: string | null;
                    stock: number;
                    categories: string[];
                    images: string[];
                    sizes: string[];
                    colors: string[];
                    featured: boolean;
                    gender: import("@prisma/client").$Enums.Gender;
                };
            } & {
                id: string;
                name: string;
                meta: import("@prisma/client/runtime/library").JsonValue | null;
                orderId: string;
                sku: string | null;
                quantity: number;
                price: number;
                size: string | null;
                color: string | null;
                productId: string;
            })[];
        } & {
            id: string;
            createdAt: Date;
            updatedAt: Date | null;
            meta: import("@prisma/client/runtime/library").JsonValue | null;
            userId: string;
            totalAmount: number;
            currency: string;
            status: import("@prisma/client").$Enums.OrderStatus;
            paymentStatus: import("@prisma/client").$Enums.PaymentStatus;
            shippingStatus: import("@prisma/client").$Enums.ShippingStatus;
            init_point: string;
            shippingAddressId: string | null;
            shippingCarrier: string | null;
            shippingTrackingNumber: string | null;
            shippingNotes: string | null;
            history: import("@prisma/client/runtime/library").JsonValue[];
            payment: import("@prisma/client/runtime/library").JsonValue | null;
            canceledAt: Date | null;
            deliveredAt: Date | null;
            refundedAt: Date | null;
        };
    }>;
    incrementStock(productId: string, quantity: number): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date | null;
        meta: import("@prisma/client/runtime/library").JsonValue | null;
        sku: string | null;
        price: number;
        slug: string | null;
        description: string | null;
        stock: number;
        categories: string[];
        images: string[];
        sizes: string[];
        colors: string[];
        featured: boolean;
        gender: import("@prisma/client").$Enums.Gender;
    }>;
    decrementStock(productId: string, quantity: number): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date | null;
        meta: import("@prisma/client/runtime/library").JsonValue | null;
        sku: string | null;
        price: number;
        slug: string | null;
        description: string | null;
        stock: number;
        categories: string[];
        images: string[];
        sizes: string[];
        colors: string[];
        featured: boolean;
        gender: import("@prisma/client").$Enums.Gender;
    }>;
}
