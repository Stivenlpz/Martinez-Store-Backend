import { EventsService } from './events.service';
import { CreateEventDto } from './dto/create-event.dto';
import { UpdateEventDto } from './dto/update-event.dto';
export declare class EventsController {
    private readonly eventsService;
    constructor(eventsService: EventsService);
    create(createEventDto: CreateEventDto): Promise<{
        name: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string;
        category: import("@prisma/client").$Enums.EventCategory;
        date: Date;
        venueId: string;
        vipCapacity: number;
        vipAvailable: number;
        vipSold: number;
        vipReserved: number;
        regularCapacity: number;
        regularAvailable: number;
        regularSold: number;
        regularReserved: number;
        vipPrice: number;
        regularPrice: number;
        poster: string;
        images: string[];
        logo: string;
    }>;
    findAll(): Promise<{
        name: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string;
        category: import("@prisma/client").$Enums.EventCategory;
        date: Date;
        venueId: string;
        vipCapacity: number;
        vipAvailable: number;
        vipSold: number;
        vipReserved: number;
        regularCapacity: number;
        regularAvailable: number;
        regularSold: number;
        regularReserved: number;
        vipPrice: number;
        regularPrice: number;
        poster: string;
        images: string[];
        logo: string;
    }[]>;
    upcoming(): Promise<{
        name: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string;
        category: import("@prisma/client").$Enums.EventCategory;
        date: Date;
        venueId: string;
        vipCapacity: number;
        vipAvailable: number;
        vipSold: number;
        vipReserved: number;
        regularCapacity: number;
        regularAvailable: number;
        regularSold: number;
        regularReserved: number;
        vipPrice: number;
        regularPrice: number;
        poster: string;
        images: string[];
        logo: string;
    }[]>;
    findOne(id: string): Promise<{
        venue: {
            name: string;
            id: string;
            address: string;
            createdAt: Date;
            updatedAt: Date;
            city: string;
            capacity: number;
        };
    } & {
        name: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string;
        category: import("@prisma/client").$Enums.EventCategory;
        date: Date;
        venueId: string;
        vipCapacity: number;
        vipAvailable: number;
        vipSold: number;
        vipReserved: number;
        regularCapacity: number;
        regularAvailable: number;
        regularSold: number;
        regularReserved: number;
        vipPrice: number;
        regularPrice: number;
        poster: string;
        images: string[];
        logo: string;
    }>;
    update(id: string, updateEventDto: UpdateEventDto): Promise<{
        name: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string;
        category: import("@prisma/client").$Enums.EventCategory;
        date: Date;
        venueId: string;
        vipCapacity: number;
        vipAvailable: number;
        vipSold: number;
        vipReserved: number;
        regularCapacity: number;
        regularAvailable: number;
        regularSold: number;
        regularReserved: number;
        vipPrice: number;
        regularPrice: number;
        poster: string;
        images: string[];
        logo: string;
    }>;
    remove(id: string): Promise<{
        name: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string;
        category: import("@prisma/client").$Enums.EventCategory;
        date: Date;
        venueId: string;
        vipCapacity: number;
        vipAvailable: number;
        vipSold: number;
        vipReserved: number;
        regularCapacity: number;
        regularAvailable: number;
        regularSold: number;
        regularReserved: number;
        vipPrice: number;
        regularPrice: number;
        poster: string;
        images: string[];
        logo: string;
    }>;
}
